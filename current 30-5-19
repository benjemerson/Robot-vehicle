#include <ENGG1500Lib.h>
#include <Servo.h> 
#define ENA 5
#define ENB 6
#define IN1 8
#define IN2 9
#define IN3 10
#define IN4 11
#define ECHO 13
#define TRIG 7
#define ECHO2 12
#define TRIG2 4 
#define LD A5
#define RD A4

//values for ir sensors
float x1 = 22;
float x2 = 10;
float x3 = -10;
float x4 = -24;

//declaring for ir sensors
float wR2;
float wR1;
float wL1;
float wL2;

//servo 
Servo myservo;  // create servo object to control a servo 
int rightDetect = 3000, leftDetect = 3000;

// wait no delay
unsigned int currentMillis = millis();

void setup() {
  // put your setup code here, to run once:
  //initiate pins for motors
  pinMode(5, OUTPUT);       //set ENA as an output  //left speed
  pinMode(6, OUTPUT);       //set ENB as an output  //right speed
  pinMode(8, OUTPUT);       //set IN1 as an output  //left direction
  pinMode(9, OUTPUT);       //set IN2 as an output  //left direction
  pinMode(10, OUTPUT);      //set IN3 as an output  //right direction
  pinMode(11, OUTPUT);      //set IN4 as an output  //right direction

  //initiate pins for line sensors
  pinMode(A0,INPUT);        //R2
  pinMode(A1,INPUT);        //R1
  pinMode(A2,INPUT);        //L1
  pinMode(A3,INPUT);        //L2
  pinMode(A4, INPUT);        //DigR
  pinMode(A5, INPUT);        //DigL
  
  //initiate pins for sonar
  pinMode(TRIG, OUTPUT);    //set trigger pin as an output
  pinMode(ECHO, INPUT);     //set read (echo) pin as an input
  pinMode(TRIG2, OUTPUT);
  pinMode(ECHO2, INPUT);

//  //Servo
//  myservo.attach(4);  // attaches the servo on pin 9 to the servo object
//  myservo.write(0);
  
  //initiate encoders
  enc_init();
  enc_clear();

  leftForwards();
  rightForwards();
  
  //initiate serial monior
  Serial.begin(115200); 

  //delay before starting main code loop
  delay(3000);              // 3 second delay
}

void loop() {
  //STATES
  char STOPPED = (sonar_forward() < 300);
  //char HALLWAY = (sonar_side() < 220);
  
  // put your main code here, to run repeatedly:
  
  if (STOPPED) {
    deadEnd();
  } else {
    lineFollow();
  }
}


//Function

void findLine(void) {
  Serial.println("find line");
  char fl = 0;
  delay(75);
  if((analogRead(A1) < 100) && (analogRead(A2) < 100)){
    if (digR() > 0) {
      analogWrite(ENB, 0);
      fl = 1;
    }
    else if (digL() > 0) {
      analogWrite(ENA, 0);
      fl = 2;
    }
    if (fl > 0) {
      if (fl == 1) {
        motorstop();
        delay(150);
        while((analogRead(A1) < 100) && (analogRead(A2) < 100)) {
          analogWrite(ENA,0);
          rightBackwards();
          analogWrite(ENB,115);
          }
      }
      else if (fl == 2) {
        motorstop();
        delay(150);
        while((analogRead(A1) < 100) && (analogRead(A2) < 100)) {
          leftBackwards();
          analogWrite(ENA,100);
          analogWrite(ENB,0);
          }
      }
      motorstop();
      delay(150);
      leftForwards();
      rightForwards();
    }
  }
}

char digL(void) {
  return digitalRead(LD);
}
char digR(void) {
  return digitalRead(RD);
}

void followWall(unsigned int pwr) {
  int wallDistance = 0;
  int gain = 1;
  wallDistance = sonar_side() - 90;
  if(wallDistance <= 10) {
    wallDistance;
  } else if (wallDistance > 10) {
    wallDistance = 10;
  } else if (wallDistance < -10) {
    wallDistance = -10;
  }  
  analogWrite(ENA, pwr + wallDistance*gain);
  analogWrite(ENB, pwr - wallDistance*gain + 5);
  Serial.println(wallDistance);
  if ((sonar_side() < 200 ) && (sonar_forward() < 120) && (analogRead(A1) < 100) && (analogRead(A2) < 100)) {        //Garage
    Serial.println("garage");
    motorstop();
    for (;;) {;};
  }
}

void deadEnd(void){
  Serial.println("dead end");
  unsigned int encL = enc_getLeft() + 10;
  unsigned int encR = enc_getRight() + 10;
  unsigned int pwr = 80;
  motorstop();
  delay(5000);
  if (sonar_forward() < 300){    
      analogWrite(ENA, pwr);
      analogWrite(ENB, pwr);
      delay(700);
      analogWrite(ENA, pwr);
      analogWrite(ENB, 0);
      delay(1300);
      motorstop();
      delay(500);
      
      while ((analogRead(A1) < 100) && (analogRead(A0) < 100)) {      //finds the line and goes forward again
        analogWrite(ENA, pwr);
        analogWrite(ENB, pwr+5);
    }
    while ((analogRead(A0) > 100) || (analogRead(A1) > 100) || (analogRead(A2) > 100) || (analogRead(A3) > 100)) {
      lineFollow();
    }
  }
}

void lineFollow(void){
  Serial.println("follow line");
  Serial.print(sonar_side());
  wR2 = analogRead(A0);
  wR1 = analogRead(A1);
  wL1 = analogRead(A2);
  wL2 = analogRead(A3);
//  Serial.println("R1, R2, L2, L1");
//  Serial.print(wR2);
//  Serial.print(" - ");
//  Serial.print(wR1);
//  Serial.print(" - ");
//  Serial.print(wL1);
//  Serial.print(" - ");
//  Serial.println(wL2);
  if ((wR2 > 300) && (wR1 > 300) &&(wL1 > 300) &&(wL2 > 300)) {
    wR2 = 1;
    wR1 = 1;
    wL1 = 1;
    wL2 = 1;
  }
  float leftcapped = wL1*x3+wL2*x4;
  if (leftcapped < 1000*x4) {
    leftcapped = 1000*x4;
  }
  float rightcapped = wR2*x1+wR1*x2;
  if (rightcapped > 1000*x1) {
    rightcapped = 1000*x1;
  }
    
  float numerator = rightcapped + leftcapped;
  float denominator = wR1+wR2+wL1+wL2;

  float lineDistance = numerator/denominator;

  unsigned int pwr = 80;
  int gain = 2.5;

  if ((sonar_side() < 220) && (sonar_side() > 0)){
    followWall(85);
  } else if(denominator < 170) {
    findLine();
  }
  
  analogWrite(ENA, pwr + lineDistance*gain);
  analogWrite(ENB, pwr - lineDistance*gain);

  //Serial.println(denominator);
  //Serial.print(" - ");
  //Serial.println(pwr_R(enc_clicks)-lineDistance*gain);
}

        //SONAR READING
        
unsigned int sonar_side(void){
  long duration = 0;
  const float speed_sound = 340.29;     // m/s, "const" makes the compiler able to optimise
            //... the program where this variable is used, cool!
            // Read in a distance from the ultrasonic distance sensor:
            // The ultrasonic burst is triggered by a HIGH pulse of 10 microseconds.
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG, LOW);
            //read length of time pulse
  duration = pulseIn(ECHO, HIGH); //This function measures a pulsewidth and returns
            //...the width in microseconds
            // convert the time into a distance
            // the code "(unsigned int)" turns the result of the distance calculation
            // into an integer instead of a floating point (decimal or fractional) number.
  unsigned int rtn = 0;
  if ((unsigned int)(0.5 * duration * 1e-6 * speed_sound * 1e3) > 300) {
    rtn = 300;
  }else {
    rtn = (unsigned int)(0.5 * duration * 1e-6 * speed_sound * 1e3);
  }
  return rtn;
            //"unsigned" ensures we are returning an unsigned number, remember that there is no
            //...such thing as negative distance.
}

unsigned int sonar_forward(void){
  long duration = 0;
  const float speed_sound = 340.29;     // m/s, "const" makes the compiler able to optimise
            //... the program where this variable is used, cool!
            // Read in a distance from the ultrasonic distance sensor:
            // The ultrasonic burst is triggered by a HIGH pulse of 10 microseconds.
  digitalWrite(TRIG2, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG2, LOW);
            //read length of time pulse
  duration = pulseIn(ECHO2, HIGH); //This function measures a pulsewidth and returns
            //...the width in microseconds
            // convert the time into a distance
            // the code "(unsigned int)" turns the result of the distance calculation
            // into an integer instead of a floating point (decimal or fractional) number.
  unsigned int rtn = 0;
  if ((unsigned int)(0.5 * duration * 1e-6 * speed_sound * 1e3) > 300) {
    rtn = 300;
  }else {
    rtn = (unsigned int)(0.5 * duration * 1e-6 * speed_sound * 1e3);
  }
  return rtn;
            //"unsigned" ensures we are returning an unsigned number, remember that there is no
            //...such thing as negative distance.
}

// MOTORS //
void motorstop(void) {              //right motor hard stop
  analogWrite(ENA,0);
  analogWrite(ENB,0);
}
//This function sets IN3 = LOW and IN4 = HIGH to set the left motor to forwards
void leftForwards(void) {
  digitalWrite(8, LOW);                       //IN1
  digitalWrite(9, HIGH);                      //IN2
}

//This function sets IN3 = LOW and IN4 = HIGH to set the left motor to backwards
void leftBackwards(void) {
  digitalWrite(8, HIGH);                      //IN1
  digitalWrite(9, LOW);                       //IN2
}

//RIGHT MOTOR//
//This function sets IN3 = LOW and IN4 = HIGH to set the right moto to forwards
void rightForwards(void) {
  digitalWrite(10, LOW);                      //IN3
  digitalWrite(11, HIGH);                     //IN4
}

//This function sets IN3 = HIGH and IN4 = LOW to set the right moto to backwards
void rightBackwards(void) {
  digitalWrite(10, HIGH);                     //IN3
  digitalWrite(11, LOW);                      //IN4
}
